plugins {
	id 'org.springframework.boot' version '2.1.5.RELEASE' apply true
  id "io.spring.dependency-management" version "1.0.6.RELEASE"
  id 'java'
	id 'io.franzbecker.gradle-lombok' version '2.0'
	id 'idea'
	id 'com.gorylenko.gradle-git-properties' version '2.0.0'
  
	id 'com.avast.gradle.docker-compose' version '0.9.4'
	id 'com.google.cloud.tools.jib' version '1.0.0'

  id 'org.unbroken-dome.helm' version '0.3.1'
  id 'org.unbroken-dome.helm-publish' version '0.3.1'
  id 'org.unbroken-dome.helm-releases' version '0.3.1'

  id 'nebula.release' version '6.3.5'
  id 'nebula.lint' version '9.3.2'
  id 'nebula.maven-base-publish' version '8.1.0'

  id 'se.patrikerdes.use-latest-versions' version '0.2.9'
  id 'com.github.ben-manes.versions' version '0.21.0'
}

apply plugin: 'maven-publish'
publishing {
}

ext {
	set('activeSpringProfiles', 'local')
  set('tag', 'local')
  set('chartRepoUrl', 'http://chartmuseum.local.svc.cluster.local/')
}

group = 'com.gregturnquist.learningspringboot'
// version = '0.0.1-SNAPSHOT'

repositories {
	jcenter()
	maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
  implementation platform('org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR1')
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
  implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
	runtimeOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.cloud:spring-cloud-starter-stream-rabbit'
	implementation 'org.springframework.cloud:spring-cloud-stream-reactive'
	implementation 'org.springframework.session:spring-session-data-mongodb'
	implementation 'io.micrometer:micrometer-core'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

lombok {
	version = '1.18.4'
	sha256 = ""
}

nebulaRelease {
  releaseBranchPatterns = ["master", "HEAD", "(release(-|\\/))?\\d+(\\.\\d+)?\\.x, v?\\d+\\.\\d+\\.\\d+"] as Set
  excludeBranchPatterns = [] as Set
  shortenedBranchPattern = "(?:(?:bugfix|feature|hotfix|release)(?:-|\\/))?(.+)"
}

bootJar {
  baseName = 'lsb2-chat'
//  version = ''
  excludeDevtools = false
}
springBoot {
  buildInfo {
    properties {
      additional = [
        'a': 'alpha',
        'b': 'bravo'
      ]
    }
  }
}

helm {
  // basic helm plugin config
  home = file("${project.buildDir}/helm/home")
  outputDir = file("${project.buildDir}/helm")
  // The global lint configuration applies to all charts
  lint {
      // treat linter warnings as errors (failing the build)
      strict = false
      enabled = true
  }
  filtering {
    // This value will be resolvable in all charts' YAML files as ${authorName}
    values.put 'authorName', 'Developer'
    values.put 'imageTag', project.version.toString()
  }
  charts {
    'lsb2-chat' {
        chartName = project.name
        chartVersion = project.version.toString()
        sourceDir = file('src/main/helm/lsb2-chat')
    }
  }
  repositories {
     museum {
         url = uri(chartRepoUrl)
     }
  }
  // helm-release plugin config
  releases {
      'lsb2-chat' {
          from charts.'lsb2-chat'
          namespace = 'local'
          replace = false
          purge = true
          dryRun = false
          wait = false
          // pass values (like --set on the command line)
          values = [ 'rootUser.password': 'secret' ]
          // pass value files (like -f on the command line)
          valueFiles.from "src/main/helm/lsb2-chat/values.yaml"
          valueFiles.from "src/main/helm/lsb2-chat/values-${activeSpringProfiles}.yaml"
      }
  }

  // helm-publish plugin config
  publishing {
      repositories {
         museum {
             url = uri(chartRepoUrl)
         }
      }
  }  
}
/*
 * docker-compose plugin configuration.
 * Details on https://github.com/avast/gradle-docker-compose-plugin
 */
dockerCompose {
  useComposeFiles = ['docker/env/local.yml'] // like 'docker-compose -f <file>'; default is empty
  buildBeforeUp = true // performs 'docker-compose build' before calling the 'up' command; default is true

  waitForTcpPorts = true // turns off the waiting for exposed TCP ports opening
  captureContainersOutput = true // if true, prints output of all containers to Gradle output - very useful for debugging; default is false

  stopContainers = true // doesn't call `docker-compose down` - see below the paragraph about reconnecting
  removeContainers = true
  removeOrphans = false // removes containers for services not defined in the Compose file

  environment.put 'TAG', version
}
composeBuild.dependsOn bootJar
composeUp.dependsOn composeBuild
composePush.dependsOn composeBuild

jib {
  from {
    image = 'openjdk:8-jre-alpine'
  }
  to {
    image = 'jghamburg/lsb2-chat:local'
//    credHelper = 'osxkeychain'
  }
  container {
    jvmFlags = ['-Djava.security.egd=file:/dev/./urandom', '-Xms512m', '-Xdebug', "-Dspring.profiles.active=local"]
    mainClass = 'com.greglturnquist.learningspringboot.chat.LearningSpringBootChatApplication'
    args = []
    ports = ['8080']
    format = 'OCI'
  }
}
