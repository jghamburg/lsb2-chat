buildscript {
	ext {
		springCloudVersion = 'Finchley.RELEASE'
		springCloudK8sVersion = '0.2.0.RELEASE'
		lombokVersion = '1.18.2'
	}
}

plugins {
	id 'org.springframework.boot' version '2.0.4.RELEASE' apply true
	// tag::gradle-git[]
	id 'com.gorylenko.gradle-git-properties' version '1.4.17'
	// end::gradle-git[]
	id 'idea'
	id 'java-gradle-plugin'
	id 'com.avast.gradle.docker-compose' version '0.8.4'
	id 'com.google.cloud.tools.jib' version '0.9.8'
}

apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	jcenter()
}

jar {
	baseName = 'learning-spring-boot-chat'
	version = '0.0.1-SNAPSHOT'
}
/*
 * docker-compose plugin configuration.
 * Details on https://github.com/avast/gradle-docker-compose-plugin
 */
dockerCompose {
  useComposeFiles = ['docker/env/local.yml'] // like 'docker-compose -f <file>'; default is empty
  // startedServices = ['web'] // list of services to execute when calling 'docker-compose up' or 'docker-compose pull' (when not specified, all services are executed)
  // scale = [${serviceName1}: 5, ${serviceName2}: 2] // Pass docker compose --scale option like 'docker-compose up --scale serviceName1=5 --scale serviceName2=2'
  // forceRecreate = false // pass '--force-recreate' when calling 'docker-compose up' when set to 'true`
  buildBeforeUp = true // performs 'docker-compose build' before calling the 'up' command; default is true
  // ignorePullFailure = false // when set to true, pass '--ignore-pull-failure' to 'docker-compose pull'
  // buildAdditionalArgs = ['--force-rm']
  // pullAdditionalArgs = ['--ignore-pull-failures']
  // upAdditionalArgs = ['--no-deps']
  // downAdditionalArgs = ['--some-switch']

  waitForTcpPorts = true // turns off the waiting for exposed TCP ports opening
  captureContainersOutput = true // if true, prints output of all containers to Gradle output - very useful for debugging; default is false
  // captureContainersOutputToFile = '/path/to/logFile' // sends output of all containers to a log file

  stopContainers = true // doesn't call `docker-compose down` - see below the paragraph about reconnecting
  removeContainers = true
  // removeImages = "None" // Other accepted values are: "All" and "Local"
  // removeVolumes = true
  removeOrphans = false // removes containers for services not defined in the Compose file

  // projectName = 'my-project' // allow to set custom docker-compose project name (defaults to directory name)
  // executable = '/path/to/docker-compose' // allow to set the path of the docker-compose executable (useful if not present in PATH)
  // dockerExecutable = '/path/to/docker' // allow to set the path of the docker executable (useful if not present in PATH)
  // dockerComposeWorkingDirectory = '/path/where/docker-compose/is/invoked/from'
  // dockerComposeStopTimeout = java.time.Duration.ofSeconds(20) // time before docker-compose sends SIGTERM to the running containers after the composeDown task has been started
  // environment.put 'BACKEND_ADDRESS', '192.168.1.100' // Pass environment variable to 'docker-compose' for substitution in compose file
}
composeBuild.dependsOn bootJar
composeUp.dependsOn composeBuild

jib {
  from {
    image = 'docker.obc.ov.otto.de/base/openjdk:8-jre-alpine'
  }
  to {
    image = "docker.obc.ov.otto.de/jib/lsb2-chat:local"
//    credHelper = 'osxkeychain'
  }
  container {
    jvmFlags = ['-Djava.security.egd=file:/dev/./urandom', '-Xms512m', '-Xdebug', "-Dspring.profiles.active=local"]
    mainClass = 'com.greglturnquist.learningspringboot.chat.LearningSpringBootChatApplication'
    args = []
    ports = ['8080']
    format = 'OCI'
  }
}

configurations {
	all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
	all*.exclude group: 'org.springframework', module: 'spring-webmvc'
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile('org.synchronoss.cloud:nio-multipart-parser')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile("org.springframework.boot:spring-boot-starter-thymeleaf")
	compile('org.springframework.boot:spring-boot-devtools')
	compile("org.projectlombok:lombok:${lombokVersion}")
	compile('org.springframework.cloud:spring-cloud-starter-stream-rabbit')
	compile('org.springframework.cloud:spring-cloud-stream-reactive')
	compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
	compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
	compile('org.springframework.cloud:spring-cloud-starter-config')

	compile('org.springframework.boot:spring-boot-starter-security')

	compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')

	compile('org.springframework.session:spring-session-data-mongodb')

	// tag::zuul[]
	compile('org.springframework.cloud:spring-cloud-starter-gateway')
	// end::zuul[]
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
