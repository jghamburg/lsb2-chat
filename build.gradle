plugins {
	id 'org.springframework.boot' version '2.1.10.RELEASE' apply true
  id "io.spring.dependency-management" version "1.0.8.RELEASE"
  id 'java'
	id 'idea'
  id 'io.franzbecker.gradle-lombok' version '3.0.0'
	id 'com.gorylenko.gradle-git-properties' version '2.1.0'
  
	id 'com.avast.gradle.docker-compose' version '0.9.4'
	id 'com.google.cloud.tools.jib' version '1.5.1'

  id 'org.unbroken-dome.helm' version '0.4.0'
  id 'org.unbroken-dome.helm-publish' version '0.4.0'
  id 'org.unbroken-dome.helm-releases' version '0.4.0'

  id 'se.patrikerdes.use-latest-versions' version '0.2.12'
  id 'com.github.ben-manes.versions' version '0.24.0'

  id 'maven-publish'
}

configurations {
  developmentOnly
  runtimeClasspath {
    extendsFrom developmentOnly
  }
}

ext {
	set('activeSpringProfiles', 'local')
  set('tag', 'local')
  set('chartRepoUrl', 'http://chartmuseum.default.svc.cluster.local/')
} 

group = 'com.gregturnquist.learningspringboot'
// version = '0.0.1-SNAPSHOT'

repositories {
	mavenCentral()
  maven { url 'https://repository.jboss.org/nexus/content/repositories/public/' }
	maven { url 'https://repo.spring.io/milestone' }
}
configurations {
  compile.exclude module: "spring-boot-starter-tomcat"
  compile.exclude module: "spring-boot-starter-jetty"
}

dependencies {
  implementation enforcedPlatform('org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR4')
//  implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
  implementation ('org.springframework.boot:spring-boot-starter-websocket'){
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-web'
  }
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
	implementation 'org.springframework.cloud:spring-cloud-starter-stream-rabbit'
	implementation 'org.springframework.cloud:spring-cloud-stream-reactive'
	implementation 'org.springframework.session:spring-session-data-mongodb'
	implementation 'io.micrometer:micrometer-core'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

sourceCompatibility = 11
targetCompatibility = 11

import org.apache.tools.ant.filters.ReplaceTokens
processResources {
  with copySpec {
    from 'src/main/resources'
    include '**/bootstrap*.yml'
    include '**/application*.yml'
    project.properties.findAll().each {
      prop ->
        if (prop.value != null) {
          filter(ReplaceTokens, tokens: [ (prop.key): prop.value])
          filter(ReplaceTokens, tokens: [ ('project.' + prop.key): prop.value])
        }
    }
  }
}

lombok {
	version = '1.18.4'
	sha256 = ""
}

springBoot {
  mainClassName = 'com.greglturnquist.learningspringboot.chat.LearningSpringBootChatApplication'
}

bootJar {
  mainClassName = 'com.greglturnquist.learningspringboot.chat.LearningSpringBootChatApplication'
  baseName = 'lsb2-chat'
  excludeDevtools = false
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.gregturnquist.learningspringboot'
            from components.java
        }
    }
}

helm {
  // basic helm plugin config
  home = file("${project.buildDir}/helm/home")
  outputDir = file("${project.buildDir}/helm")
  // The global lint configuration applies to all charts
  lint {
      // treat linter warnings as errors (failing the build)
      strict = false
      enabled = true
  }
  filtering {
    // This value will be resolvable in all charts' YAML files as ${authorName}
    values.put 'authorName', 'Developer'
    values.put 'image.tag', project.version.toString()
  }
  charts {
    'lsb2-chat' {
        chartName = project.name
        chartVersion = project.version.toString()
        sourceDir = file('src/main/helm/lsb2-chat')
    }
  }
  repositories {
     museum {
         url = uri(chartRepoUrl)
     }
  }
  // helm-release plugin config
  releases {
      'lsb2-chat' {
          from charts.'lsb2-chat'
          namespace = 'local'
          replace = false
          purge = true
          dryRun = false
          wait = false
          // pass values (like --set on the command line)
          values = [ 'image.tag': project.version ]
          // pass value files (like -f on the command line)
          valueFiles.from "src/main/helm/lsb2-chat/values.yaml"
          valueFiles.from "src/main/helm/lsb2-chat/values-${activeSpringProfiles}.yaml"
      }
  }

  // helm-publish plugin config
  publishing {
      repositories {
         museum {
             url = uri(chartRepoUrl)
         }
      }
  }  
}
/*
 * docker-compose plugin configuration.
 * Details on https://github.com/avast/gradle-docker-compose-plugin
 */
dockerCompose {
  useComposeFiles = ['docker/env/local.yml'] // like 'docker-compose -f <file>'; default is empty
  buildBeforeUp = true // performs 'docker-compose build' before calling the 'up' command; default is true

  waitForTcpPorts = true // turns off the waiting for exposed TCP ports opening
  captureContainersOutput = true // if true, prints output of all containers to Gradle output - very useful for debugging; default is false

  stopContainers = true // doesn't call `docker-compose down` - see below the paragraph about reconnecting
  removeContainers = true
  removeOrphans = false // removes containers for services not defined in the Compose file

  environment.put 'TAG', version
}
composeBuild.dependsOn bootJar
composeUp.dependsOn composeBuild
composePush.dependsOn composeBuild

jib {
  from {
    image = 'azul/zulu-openjdk-alpine:11.0.3'
  }
  to {
    image = 'jghamburg/lsb2-chat:local'
//    credHelper = 'osxkeychain'
  }
  container {
    jvmFlags = ['-Djava.security.egd=file:/dev/./urandom', '-Xms512m', '-Xdebug', "-Dspring.profiles.active=local"]
    mainClass = 'com.greglturnquist.learningspringboot.chat.LearningSpringBootChatApplication'
    args = []
    ports = ['8080']
    format = 'OCI'
  }
}

task semanticRelease (type: Exec){
  workingDir '.'
  commandLine 'semantic-release', '-b', 'master', '--no-ci'
}

task verifySemanticRelease (type: Exec){
  workingDir '.'
  commandLine 'semantic-release', '-b', 'master'
}
